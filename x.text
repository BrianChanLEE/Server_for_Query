const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { createUser, findUserByEmail } = require('../models/user');
const config = require('../config/config');
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 587,
  secure: false,
  auth: {
    user: "brianlee1914@gmail.com",
    pass: "Apple2019!!!"
  }
});

module.exports = {
  async signup(req, res) {
    const { name, email, password, address } = req.body;

    // Check if email already exists
    const user = await findUserByEmail(email);
    if (user) {
      return res.status(409).json({ error: 'Email already in use' });
    }

    // Hash the password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Create user
    const createdUser = await createUser(name, email, hashedPassword, address);

    // Send email confirmation
    const token = jwt.sign({ email: createdUser.email }, config.jwtSecret);
    const mailOptions = {
      from
      to: createdUser.email,
      subject: 'Please confirm your email address',
      text: `Please click the following link to confirm your email address: ${config.appUrl}/api/auth/confirm-email?token=${token}`
    };

    try {
      await transporter.sendMail(mailOptions);
    } catch (err) {
      console.log(err);
      return res.status(500).json({ error: 'Email confirmation failed' });
    }

    // Respond with success
    res.status(201).json({ success: true });
  },

  async login(req, res) {
    const { email, password } = req.body;

    // Find user by email
    const user = await findUserByEmail(email);
    if (!user) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    // Compare password
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    // Create token
    const token = jwt.sign(
      { id: user.id, email: user.email, role: user.role },
      config.jwtSecret,
      { expiresIn: '1h' }
    );

    // Respond with token
    res.json({ token });
  },

  async confirmEmail(req, res) {
    const { token } = req.query;

    try {
      const { email } = jwt.verify(token, config.jwtSecret);
      const user = await findUserByEmail(email);

      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      await updateUser(user.id, { isEmailConfirmed: true });

      res.redirect(config.appUrl);
    } catch (err) {
      console.log(err);
      res.status(400).json({ error: 'Invalid token' });
    }
  }
};
